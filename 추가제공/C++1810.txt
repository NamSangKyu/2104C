#include <iostream>
#include <string>
using namespace std;
/*
클래스는 객체의 설계도
객체의 공통적인 부분을 뽑아서 
정의 한것이 클래스
*/
class Animal{
public:
	//멤버 변수
	int age;
	//멤버 함수
	void printAge(){
		cout << "이 동물의 나이는 : " << age << endl;
	}
};

void main(){
	Animal a;
	a.age = 20;
	a.printAge();


}
----------------------------
#include <iostream>
#include <string>
using namespace std;
/*
클래스는 객체의 설계도
객체의 공통적인 부분을 뽑아서 
정의 한것이 클래스
*/
class Animal{
public:
	//멤버 변수
	int age;
	//멤버 함수
	void printAge(){
		cout << "이 동물의 나이는 : " << age << endl;
	}
};
//1. Person
class Person{
private:
	int age;
	string name;
public:
	//생성자
	Person(int age, string name){
		this->age = age;
		this->name = name;
		cout << "클래스 생성" << endl;
	}
	//소멸자
	~Person(){
		cout << "소멸자 호출" << endl;
	}
	void printInfo(){
		cout << "이름 : " << name << endl;
		cout << "나이 : " << age << endl;
	}
};

//2. Operator
class Operator{
public:
	int plus(int a, int b){
		return a+b;
	}
	int minus(int a, int b){
		return a-b;
	}
	int multi(int a, int b){
		return a*b;
	}
	int div(int a, int b){
		return a/b;
	}
	int mod(int a, int b){
		return a%b;
	}
};
void main(){
	/*
	Animal a;
	a.age = 20;
	a.printAge();
	*/
	Person p(20,"철수");
	//p.age = 20;
	//p.name = "철수";
	p.printInfo();
	/*	
	Operator o;
	cout << o.plus(10,20) << endl;
	cout << o.minus(10,20) << endl;
	cout << o.multi(10,20) << endl;
	cout << o.div(10,20) << endl;
	cout << o.mod(10,20) << endl;
	*/
	cout << "main exit" << endl;
}
---------------------
#include <iostream>
#include <string>
using namespace std;
class Subject{
private:
	//과목명
	string title;
	//점수
	int score;
	//등급
	char grade;
public:
	//생성자
	Subject(string title, int score){
		this->title = title;
		this->score = score;
		setGrade();
	}
	string getTitle(){
		return title;
	}
	void setTitle(string title){
		this->title = title;
	}
	int getScore(){
		return score;
	}
	void setScore(int score){
		this->score = score;
	}
	char getGrade(){
		return grade;
	}
	void setGrade(){
		char ch;
		switch(score/10){
		case 10:
		case 9:
			ch = 'A';
			break;
		case 8:
			ch = 'B';
			break;
		case 7:
			ch = 'C';
			break;
		case 6:
			ch = 'D';
			break;
		default:
			ch = 'F';
		}
		grade = ch;
	}
	void printSubject(){
		cout << "과목명 : " << title << endl;
		cout << "점  수 : " << score << endl;
		cout << "등  급 : " << grade << endl;
	}
};
class Student{

};
void main(){
	Subject s("국어",100);
	s.printSubject();

}
-----------------------
#include <iostream>
#include <string>
using namespace std;
class Subject{
private:
	//과목명
	string title;
	//점수
	int score;
	//등급
	char grade;
public:
	//생성자
	Subject(){}
	Subject(string title, int score){
		this->title = title;
		this->score = score;
		setGrade();
	}
	string getTitle(){
		return title;
	}
	void setTitle(string title){
		this->title = title;
	}
	int getScore(){
		return score;
	}
	void setScore(int score){
		this->score = score;
	}
	char getGrade(){
		return grade;
	}
	void setGrade(){
		char ch;
		switch(score/10){
		case 10:
		case 9:
			ch = 'A';
			break;
		case 8:
			ch = 'B';
			break;
		case 7:
			ch = 'C';
			break;
		case 6:
			ch = 'D';
			break;
		default:
			ch = 'F';
		}
		grade = ch;
	}
	void printSubject(){
		cout << "과목명 : " << title << endl;
		cout << "점  수 : " << score << endl;
		cout << "등  급 : " << grade << endl;
	}
};
class Student{
private:
	int no;
	string name;
	string major;
	Subject *s;
public:
	Student(int no,string name,string major, Subject *s){
		this->no = no;
		this->name = name;
		this->major = major;
		this->s = s;
	}
	void setNo(int no){
		this->no = no;
	}
	void setName(string name){
		this->name = name;
	}
	void setMajor(string major){
		this->major = major;
	}
	int getNo(){
		return no;
	}
	string getName(){
		return name;
	}
	string getMajor(){
		return major;
	}
	void printInfo(){
		cout << "학번:" << no << endl;
		cout << "이름:" << name << endl;
		cout << "전공:" << major << endl;
		double avg=0.0;
		for(int i=0;i<2;i++){
			avg += s[i].getScore();
		}
		cout << "평균: " << avg/i << endl;
	}
};
void main(){
	Subject s("국어",100);
	s.printSubject();
	//Student p(2009413211,"남상규","게임학");
	//p.printInfo();

	Subject arr[2];
	arr[0].setTitle("국어");
	arr[1].setTitle("수학");
	arr[0].setScore(95);
	arr[1].setScore(80);
	arr[0].setGrade();
	arr[1].setGrade();
	Student p(2009413211,"남상규","게임학",arr);
	p.printInfo();

}
----------------------
#include <iostream>
#include <string>
using namespace std;
class MP3Player{
private:
	string *list;
	//재생, 재생할 곡 번호
	int index;
public:
	//생성자
	MP3Player(string *list){
		this->list = list;
		index = 0;
	}
	//set/get
	string* getList(){
		return list;
	}
	void setList(string *list){
		this->list = list;
	}
	int getIndex(){
		return index;
	}
	void setIndex(int index){
		this->index = index;
	}
	//재생 -> Hate You 곡 재생
	void play(){
		cout << list[index] << "곡 재생" << endl;
	}
	//이전곡 재생 -> U&I 곡 재생
	void prePlay(){
		//재생할 곡번호 감소
		index--;

		if(index < 0)
			index = 9;

		play();
	}
	//다음곡 재생 -> 눈물이 흐른다 곡 재생
	void nextPlay(){
		//재생할 곡번호 증가
		index++;

		if(index > 9)
			index = 0;

		play();
	}
};
void main(){
	string *str = new string[10];
	str[0] = "Hate You";
	str[1] = "눈물이 흐른다";
	str[2] = "으르렁(Growl)";
	str[3] = "퐁키";
	str[4] = "아는 사람 애기";
	str[5] = "첫 사랑니";
	str[6] = "빠빠빠";
	str[7] = "KILL BILL";
	str[8] = "Badman";
	str[9] = "U&I";

	MP3Player m(str);	
	m.prePlay();
	m.prePlay();
	m.prePlay();
	m.prePlay();
	
	delete []str;
}
---------------------
#include <iostream>
#include <string>
using namespace std;
class Subject{
private:
	//과목명
	string title;
	//점수
	int score;
	//등급
	char grade;
public:
	//생성자
	Subject(){}
	Subject(string title, int score){
		this->title = title;
		this->score = score;
		setGrade();
	}
	string getTitle(){
		return title;
	}
	void setTitle(string title){
		this->title = title;
	}
	int getScore(){
		return score;
	}
	void setScore(int score){
		this->score = score;
	}
	char getGrade(){
		return grade;
	}
	void setGrade(){
		char ch;
		switch(score/10){
		case 10:
		case 9:
			ch = 'A';
			break;
		case 8:
			ch = 'B';
			break;
		case 7:
			ch = 'C';
			break;
		case 6:
			ch = 'D';
			break;
		default:
			ch = 'F';
		}
		grade = ch;
	}
	void printSubject(){
		cout << "과목명 : " << title << endl;
		cout << "점  수 : " << score << endl;
		cout << "등  급 : " << grade << endl;
	}
};
class Student{
private:
	int no;
	string name;
	string major;
	Subject *s;
public:
	Student(){}
	Student(int no,string name,string major, Subject *s){
		this->no = no;
		this->name = name;
		this->major = major;
		this->s = s;
	}
	void setNo(int no){
		this->no = no;
	}
	void setName(string name){
		this->name = name;
	}
	void setMajor(string major){
		this->major = major;
	}
	void setSubject(Subject *s){
		this->s = s;
	}
	Subject* getS(){
		return s;
	}
	int getNo(){
		return no;
	}
	string getName(){
		return name;
	}
	string getMajor(){
		return major;
	}
	void printInfo(){
		cout << "학번:" << no << endl;
		cout << "이름:" << name << endl;
		cout << "전공:" << major << endl;
		double avg=0.0;
		for(int i=0;i<2;i++){
			avg += s[i].getScore();
		}
		cout << "평균: " << avg/i << endl;
	}
};
class ScoreService{
private:
	Student *list;
public:
	//생성자
	ScoreService(Student *list){
		this->list = list;
	}
	//set/get
	void setList(Student *list){
		this->list = list;
	}
	Student* getList(){
		return list;
	}
	//학생정보검색함수(학번)
	void printStudentInfo(int no){
		int i;
		for(i=0;i<10;i++){
			if(list[i].getNo()==no){
				list[i].printInfo();
				break;
			}
		}
	}
	//학과 평균 출력
	void printMajorAverage(string major){
		int i;
		int count=0;
		double avg =0.0;
		for(i=0;i<3;i++){
			if(list[i].getMajor()==major){
				Subject *ptr = list[i].getS();
				int j;
				double temp = 0.0;
				for(j=0;j<2;j++){
					temp += ptr[j].getScore();
				}
				avg += (temp/2);
				count++;			
			}
		}
		cout << major << "학과 평균 : " << avg/count << endl;
	}
};
void main(){

	Subject a1[2];
	a1[0].setTitle("국어");
	a1[1].setTitle("수학");
	a1[0].setScore(95);
	a1[1].setScore(80);
	a1[0].setGrade();
	a1[1].setGrade();
	
	Subject a2[2];
	a2[0].setTitle("국어");
	a2[1].setTitle("수학");
	a2[0].setScore(85);
	a2[1].setScore(75);
	a2[0].setGrade();
	a2[1].setGrade();

	Subject a3[2];
	a3[0].setTitle("국어");
	a3[1].setTitle("수학");
	a3[0].setScore(75);
	a3[1].setScore(90);
	a3[0].setGrade();
	a3[1].setGrade();

	Student arr2[3];
	arr2[0].setNo(2009413211);
	arr2[0].setName("남상규");
	arr2[0].setMajor("게임학");
	arr2[0].setSubject(a1);

	arr2[1].setNo(2009413212);
	arr2[1].setName("남상규1");
	arr2[1].setMajor("게임학");
	arr2[1].setSubject(a2);

	arr2[2].setNo(2009413213);
	arr2[2].setName("남상규2");
	arr2[2].setMajor("게임학2");
	arr2[2].setSubject(a3);
	
	ScoreService s(arr2);
	//s.printStudentInfo(2009413213);
	s.printMajorAverage("게임학");
	

}
-------------------------------
#include <iostream>
#include <string>
using namespace std;
class Animal{
protected:
	//멤버 변수
	int age;
public:
	//Animal(){}
	Animal(int age){
		this->age = age;
		cout << "Animal class 생성" << endl;
	}
	~Animal(){
		cout << "Animal class 소멸" << endl;
	}
	int getAge(){
		return age;
	}
	void setAge(int age){
		this->age = age;
	}
	//멤버 함수
	void printAge(){
		cout << "이 동물의 나이는 : " << age << endl;
	}
};
class Person : public Animal{
public:
	Person(int age) : Animal(age){
		cout << "Person class 생성" << endl;	
	}
	~Person(){
		cout << "Person class 소멸" << endl;
	}
	//함수의 오버라이딩
	void printAge(){
		cout << "이 사람의 나이는 : " << age << endl;
	}
	void walk(){
		cout << "사람이 걷습니다" << endl;
	}
};
class Korean : public Person{
public:
	Korean(int age) : Person(age){
		cout << "Korean class 생성" << endl;
	}
	void printAge(){
		cout << "이 한국인의 나이는 : " << age << endl;
	}
};

void main(){
//	Person p(20);
//	p.printAge();
	Korean k(20);
	//k.printAge();
	// is a
	// A는 B다   ---> 사람은 동물이다. O
	// B는 C다   ---> 개도 동물이다. O
	// A는 C다   ---> 사람은 개다. X
	Animal *ptr;
	ptr = &k;
	ptr->printAge();

}
--------------------------
#include <iostream>
#include <string>
using namespace std;

class Item{
public:
	virtual void excute(){
		cout << "아이템 사용" << endl;
	}
};
class HP_Liquid : public Item{
public:
	void excute(){
		cout << "HP회복물약 사용" << endl;
	}
};
class MP_Liquid : public Item{
public:
	void excute(){
		cout << "MP회복물약 사용" << endl;
	}
};
class Speed_Liquid : public Item{
public:
	void excute(){
		cout << "공속강화 물약 사용" << endl;
	}
};
class Player{
private:
	Item *item[3];
public:
	Player(){
		item[0] = new HP_Liquid();
		item[1] = new MP_Liquid();
		item[2] = new Speed_Liquid();
	}
	void useItem(int code){
		cout << "플레이어가 아이템을 사용합니다" << endl;
		item[code]->excute();
	}
};

void main(){
	Player p;
	p.useItem(0);
	p.useItem(1);
	p.useItem(2);
}
--------------------------
#include <iostream>
using namespace std;

class Operator{
public:
	int excute(int num1, int num2){
		return num1 + num2;
	}

};

class DoubleOperator : public Operator{
public:
	int excute(int num1, int num2){
		double result = num1 + num2;
		return result;
	}

	double excute(double n1, double n2){
		return n1+n2;
	}

};


void main(){
	DoubleOperator d_operator;
	cout << d_operator.excute(10.1,22.3) << endl;
	cout << d_operator.excute(9,11) << endl;
}



--------------------------
#include <iostream>
#include <string>
using namespace std;
class MP3Player{
private:
	string *list;
	//재생, 재생할 곡 번호
	int index;
public:
	//생성자
	MP3Player(string *list){
		this->list = list;
		index = 0;
	}
	//set/get
	string* getList(){
		return list;
	}
	void setList(string *list){
		this->list = list;
	}
	int getIndex(){
		return index;
	}
	void setIndex(int index){
		this->index = index;
	}
	//재생 -> Hate You 곡 재생
	void play(){
		cout << list[index] << "곡 재생" << endl;
	}
	//이전곡 재생 -> U&I 곡 재생
	void prePlay(){
		//재생할 곡번호 감소
		index--;

		if(index < 0)
			index = 9;

		play();
	}
	//다음곡 재생 -> 눈물이 흐른다 곡 재생
	void nextPlay(){
		//재생할 곡번호 증가
		index++;

		if(index > 9)
			index = 0;

		play();
	}
};
class Irever : public MP3Player{
private:
	bool srs;
public:
	Irever(string *list):MP3Player(list){
		srs = false;
	}
	void switchSRS(){
		if(srs){
			cout << "srs off" << endl;
		}else{
			cout << "srs on" << endl;
		}
		srs = !srs;
	}

};
void main(){
	string *str = new string[10];
	str[0] = "Hate You";
	str[1] = "눈물이 흐른다";
	str[2] = "으르렁(Growl)";
	str[3] = "퐁키";
	str[4] = "아는 사람 애기";
	str[5] = "첫 사랑니";
	str[6] = "빠빠빠";
	str[7] = "KILL BILL";
	str[8] = "Badman";
	str[9] = "U&I";
	/*
	MP3Player m(str);	
	m.prePlay();
	m.prePlay();
	m.prePlay();
	m.prePlay();
	*/
	Irever i(str);
	i.switchSRS();
	i.switchSRS();
	i.switchSRS();
	delete []str;
}
--------------
#include <iostream.h>
class Power{
protected:
	bool status;
public:
	Power(){
		status = false;
	}
	virtual void OnOff(){
		cout << "전원 OnOff 함수" << endl;
	}

};
class Light : public Power{

public:
	void OnOff(){
		if(status){
			cout << "전등 끄기" << endl;
		}else{
			cout << "전등 켜기" << endl;
		}
		status = !status;
	}

};
class Boiler : public Power{
public:
	void OnOff(){
		if(status){
			cout << "보일러 끄기" << endl;
		}else{
			cout << "보일러 켜기" << endl;
		}
		status = !status;
	}
	
};
class Heater : public Power{
public:
	void OnOff(){
		if(status){
			cout << "전열기 끄기" << endl;
		}else{
			cout << "전열기 켜기" << endl;
		}
		status = !status;
	}

};

void On(Power *list[]){
	int i;
	for(i=0;i<3;i++){
		list[i]->OnOff();
	}
}
int main(int argc, char* argv[])
{
	Power *list[3];
	list[0] = new Light();
	list[1] = new Boiler();
	list[2] = new Heater();
	
	On(list);
	int i;

	for(i=0;i<3;i++)
		delete list[i];
	return 0;
}
----------------------------
#include <iostream>
#include <string>
using namespace std;
class Power{
protected:
	bool status;
public:
	Power(){
		status = false;
		cout << "Power class 생성" << endl;
	}
	//순수 가상함수
	//순수 가상함수 1개만 있어도 추상클래스
	//추상 클래스는 직접적으로 생성이 안된다.
	//추상 클래스 상속을 받으면 자식클래스는
	//순수 가상함수를 무조건 오버라이딩 해주어야 한다.
	//순수 가상함수는 구현부가 없기 때문에 자식 클래스에서 구현
	virtual void OnOff()=0;
};
class Light : public Power{
public:
	Light(){
		cout << "Light class 생성" << endl;
	}
	void OnOff(){
		if(status){
			cout << "전등 끄기" << endl;
		}else{
			cout << "전등 켜기" << endl;
		}
		status = !status;
	}

};
void main(){
	Light l;
	l.OnOff();
	l.OnOff();
	l.OnOff();
	l.OnOff();
	Power *ptr;
	ptr = &l;
	ptr->OnOff();

}
-------------------------
#include <iostream>
#include <string>
using namespace std;
/*
Player 클래스
 - play(), stop(), next(), pre()
*/
class Player{
public:
	virtual void play()=0;
	virtual void stop()=0;
	virtual void next()=0;
	virtual void pre()=0;
};

/*
MP3 - Player
 - 멤버변수 : 곡리스트(문자열), 인덱스(int)
 - 재정의 : play() : 현재 인덱스 재생, stop() : 재생정지, next() : 다음파일 재생, pre() : 이전파일 재생
*/
class MP3 : public Player{
private:
	string *list;
	int index;
public:
	MP3(string *list){
		this->list=list;
		index = 0;	
	}
	void play(){
		cout << list[index] << "번째 재생" << endl;
	}
	void stop(){
		cout << "재생 정지" << endl;
	}
	void next(){
		index++;
		if(index >= 10)
			index = 0;
		play();
	}
	void pre(){
		index--;
		if(index < 0)
			index = 9;
		play();
	}
};
/*
DVD - Player
 - 멤버변수 : 트랙(int)
 - 재정의 : play() : 현재 트랙 재생, stop() : 재생정지, next() : 다음트랙 재생, pre() : 이전트랙 재생
*/
class DVD : public Player{
private:
	int track;
public:
	DVD(){
		track=0;
	}
	void play(){
		cout << track << "번 트랙 재생" << endl;
	}
	void stop(){
		cout << "재생 정지" << endl;
	}
	void next(){
		track++;
		if(track > 8)
			track = 0;
		play();
	}
	void pre(){
		track--;
		if(track < 0)
			track = 8;
		play();
	}

};
/*
Video - Player
 - 멤버변수 : 테입(문자열)
 - 재정의 : play() : 테입 재생, stop() : 재생정지, next() : 빨리감기, pre() : 뒤로감기
*/
class Video : public Player{
private:
	string tape;
public:
	Video(string tape){
		this->tape = tape;
	}
	void play(){
		cout << tape << "재생" << endl;
	}
	void stop(){
		cout << "재생 정지" << endl;
	}
	void next(){
		cout << "빨리 감기" << endl;
	}
	void pre(){
		cout << "뒤로 감기" << endl;
	}

};
void main(){
	
}
---------------------------
#include <iostream>
#include <string>
using namespace std;
/*
Player 클래스
 - play(), stop(), next(), pre()
*/
class Player{
public:
	Player(int a){
		cout << "Player class 생성" << endl;
	}
	virtual void play()=0;
	virtual void stop()=0;
	virtual void next()=0;
	virtual void pre()=0;
};
class Power{
protected:
	bool status;
public:
	Power(bool status){
		this->status = status;
		cout << "Power class 생성" << endl;
	}
	virtual void OnOff()=0;
};
class MP3 : public Player, public Power{
private:
	string *list;
	int index;
public:
	MP3(string *list, int a, bool status) : Player(a), Power(status){
		this->list=list;
		index = 0;	
	}
	void play(){
		cout << list[index] << "번째 재생" << endl;
	}
	void stop(){
		cout << "재생 정지" << endl;
	}
	void next(){
		index++;
		if(index >= 10)
			index = 0;
		play();
	}
	void pre(){
		index--;
		if(index < 0)
			index = 9;
		play();
	}
	void OnOff(){
		if(status)
			cout << "MP3 Off" << endl;
		else
			cout << "MP3 On" << endl;

		status = !status;
	}
};
void main(){
	string *str = new string[10];
	str[0] = "Hate You";
	str[1] = "눈물이 흐른다";
	str[2] = "으르렁(Growl)";
	str[3] = "퐁키";
	str[4] = "아는 사람 애기";
	str[5] = "첫 사랑니";
	str[6] = "빠빠빠";
	str[7] = "KILL BILL";
	str[8] = "Badman";
	str[9] = "U&I";
	MP3 m(str,10,false);
	m.OnOff();
	m.OnOff();

}
-------------
#include <iostream>
using namespace std;

class Integer{
private:
	int num;
public:
	Integer(int num){
		this->num = num;
	}

	int operator+(Integer &n){
		
		return num + n.num;
	}

};

void main(){
	Integer n1(10);
	Integer n2(20);

	int n3 = n1 + n2;

	cout << "객체 n1+n2 = " << n3 << endl;

}
-------------
/*#include <iostream>
using namespace std;

int plus(int a, int b){
	return a+b;
}
float plus(float a, float b){
	return a+b;
}

template <class T>
T plus(T a, T b){
	return a+b;
}
template <class T>
class Operator{
private:
	T a,b;
public:
	Operator(T a, T b){
		this->a = a;
		this->b = b;
	}
	T plus(){
		return a+b;
	}
	T minus(){
		return a-b;
	}

};
void main(){
	cout << plus(1,2) << endl;
	cout << plus(1.5,2.3) << endl;
	Operator<double> op(10.3,55.2);
	cout << op.plus() << endl;
	cout << op.minus() << endl;
}*/
#include <iostream>
using namespace std;

class Animal{
protected:
	//멤버 변수
	int age;
public:
	//Animal(){}
	Animal(int age){
		this->age = age;
		cout << "Animal class 생성" << endl;
	}
	~Animal(){
		cout << "Animal class 소멸" << endl;
	}
	int getAge(){
		return age;
	}
	void setAge(int age){
		this->age = age;
	}
	//멤버 함수
	virtual void printAge(){
		cout << "이 동물의 나이는 : " << age << endl;
	}
};
class Person : public Animal{
public:
	Person(int age) : Animal(age){
		cout << "Person class 생성" << endl;	
	}
	~Person(){
		cout << "Person class 소멸" << endl;
	}
	//함수의 오버라이딩
	void printAge(){
		cout << "이 사람의 나이는 : " << age << endl;
	}
	void walk(){
		cout << "사람이 걷습니다" << endl;
	}
};
class Korean : public Person{
public:
	Korean(int age) : Person(age){
		cout << "Korean class 생성" << endl;
	}
	void printAge(){
		cout << "이 한국인의 나이는 : " << age << endl;
	}
};

template <class T>
class ServicePerson{
private:
	T *a;
public:
	ServicePerson(T *a){
		this->a = a;
	}
	~ServicePerson(){
		int i;
		for(i=0;i<2;i++,a++){
			delete *a;
		}
	}

	void printAge(){
		int i;
		for(i=0;i<2;i++){
			a[i]->printAge();
		}
	}
};
void main(){
	Person* arr[2];
	arr[0] = new Person(20);
	arr[1] = new Korean(21);
	ServicePerson<Person*> p(arr);
	p.printAge();
	
}
-------------------
#include <iostream>
#include <list>
using namespace std;

int main(void)
{
	list<int> lst;
	//추가
	lst.push_back(1);//맨뒤에 값을 추가 
	lst.push_back(2);
	lst.push_back(3);
	lst.push_back(4);
	lst.push_front(5);//맨앞에 값을 추가
	lst.push_front(1);
	lst.push_front(2);

	cout << "저장된 개수 : " << lst.size() << endl;
	lst.remove(2); //해당하는 값 삭제
				   //lst.clear();//리스트에 있는 모든 내용을 비움
	cout << "리스트에 내용이 있냐? " << lst.empty();
	cout << endl;

	//조회
	list<int>::iterator it;
	for (it = lst.begin(); it != lst.end(); it++)
		cout << *it << endl;

	return 0;
}
-------------------
#include <iostream>
#include <set>
using namespace std;

int main(void)
{
	set<int> s;

	//추가
	s.insert(1);
	s.insert(2);
	s.insert(3);
	s.insert(4);
	s.insert(2);
	s.insert(0);
	s.insert(5);

	cout << "저장하고 있는 개수 : " << s.size() << endl;
	//s.erase(1); //데이터 삭제
	//s.clear(); //모든 데이터 삭제
	cout <<"Set이 비어있느냐? " << s.empty() << endl;
	
	//조회
	set<int>::iterator it;
	for (it = s.begin(); it != s.end(); it++) {
		cout << *it << endl;
	}


	return 0;
}
------------
#include <iostream>
#include <list>
#include <set>
#include <string>
#include <time.h>
#include <stdlib.h>
using namespace std;
class Player{
public:
	Player(int a){
		cout << "Player class 생성" << endl;
	}
	virtual void play()=0;
	virtual void stop()=0;
	virtual void next()=0;
	virtual void pre()=0;
};
class Power{
protected:
	bool status;
public:
	Power(bool status){
		this->status = status;
		cout << "Power class 생성" << endl;
	}
	virtual void OnOff()=0;
};
class MP3 : public Player, public Power{
private:
	string maker;
	string *list;
	int index;
public:
	MP3(string *list, int a, bool status, string maker) : Player(a), Power(status){
		this->list=list;
		this->maker = maker;
		index = 0;	
	}
	void play(){
		cout << list[index] << " 재생" << endl;
	}
	void stop(){
		cout << "재생 정지" << endl;
	}
	void next(){
		index++;
		if(index >= 10)
			index = 0;
		play();
	}
	void pre(){
		index--;
		if(index < 0)
			index = 9;
		play();
	}
	void OnOff(){
		if(status)
			cout << maker << " MP3 Off" << endl;
		else
			cout << maker << " MP3 On" << endl;

		status = !status;
	}
};
void main(){
	/*
	list<int> lst;
	lst.push_back(0);
	lst.push_back(1);
	lst.push_back(3);
	lst.push_back(2);
	lst.push_back(3);
	lst.push_back(4);
	lst.push_back(3);

	list<int>::iterator it;

	for(it=lst.begin();it!=lst.end();it++){
		cout << *it << endl;
	}
	
	string *str = new string[10];
	str[0] = "Hate You";
	str[1] = "눈물이 흐른다";
	str[2] = "으르렁(Growl)";
	str[3] = "퐁키";
	str[4] = "아는 사람 애기";
	str[5] = "첫 사랑니";
	str[6] = "빠빠빠";
	str[7] = "KILL BILL";
	str[8] = "Badman";
	str[9] = "U&I";

	list<MP3*> lst;
	lst.push_back(new MP3(str,10, false,"A"));
	lst.push_back(new MP3(str,10, false,"B"));
	lst.push_back(new MP3(str,10, false,"C"));
	lst.push_back(new MP3(str,10, false,"D"));
	lst.push_back(new MP3(str,10, false,"E"));
		
	list<MP3*>::iterator it;
	for(it=lst.begin();it!=lst.end();it++){
		(*it)->OnOff();
	}

	for(it=lst.begin();it!=lst.end();it++){
		delete *it;
	}

	list<set<int>*> lst;
	lst.push_back(new set<int>());
	lst.push_back(new set<int>());
	lst.push_back(new set<int>());
	lst.push_back(new set<int>());

	list<set<int>*>::iterator it;
	for(it=lst.begin();it!=lst.end();it++){
		(*it)->insert(1);
		
	}

	for(it=lst.begin();it!=lst.end();it++){
		delete *it;
	}
*/
	srand((unsigned)time(NULL));

	list<set<int>*> lst;
	lst.push_back(new set<int>());
	lst.push_back(new set<int>());
	lst.push_back(new set<int>());
	lst.push_back(new set<int>());
	lst.push_back(new set<int>());

	list<set<int>*>::iterator it;
	for(it=lst.begin();it!=lst.end();it++){
		while((*it)->size() < 6){
			(*it)->insert(rand()%45+1);
		}
		
	}
	set<int>::iterator s;
	for(it=lst.begin();it!=lst.end();it++){
		for(s=(*it)->begin();s!=(*it)->end();s++){
			cout << *s << " ";
		}
		cout << endl;
	}

	for(it=lst.begin();it!=lst.end();it++){
		delete *it;
	}

}
----------------------
#include <iostream>
#include <map>
#include <string>
using namespace std;

void main(){
	map<int,string> m;
	m[0] = "10";
	m[1] = "11";
	m[3] = "13";
	m[2] = "12";
	m[4] = "14";
	m[2] = "16";
	cout << m.size() << endl;
	//m.clear();
	if(m.empty())
		cout << "비었다" << endl;
	else{
		map<int,string>::iterator it = m.find(3);
		
		cout << it->second << endl;
		for(it=m.begin();it!=m.end();it++){
			cout << it->first << " " <<  it->second << endl;
		}
	}	
}